<?php

global $theme_path;

// This is terrible
if (strpos($theme_path, 'nth') != '') {

	set_include_path(get_include_path() . PATH_SEPARATOR . $theme_path . '/php/_lib/Google');

	require_once 'autoload.php';

	/**
	 * Get Vimeo Thumbnail
	 *
	 * @param  string $id video id
	 *
	 * @return string     url of thumbnail
	 */
	function getVimeoThumb($id) {

	    try {

	        $trying = get_headers('http://vimeo.com/api/v2/video/' . (int) $id . '.xml');

	        if (substr($trying[0], 9, 1) !== '4') {

	            $vimeo = simplexml_load_file('http://vimeo.com/api/v2/video/' . (int) $id . '.xml');

	            $vimeo = $vimeo->video->thumbnail_large;

	        } else {
	            $vimeo = '';
	        }

	    } catch (Exception $e) {

	        $vimeo = '';

	    }

	    return nvl((string) $vimeo, '');

	}

	/**
	 * Get YouTube Thumbnail (Attempt for highest quality)
	 *
	 * @param  string $id video id
	 *
	 * @return string     url of thumbnail
	 */
	function getYouTubeThumb($id) {

	    $image = '';

	    try {

	        $youtube = getVideoById($id);

	        $imgfound = false;

	        if (isset($youtube[0]['thumbnails']['medium'])) {
	            $image = $youtube[0]['thumbnails']['medium']['url'];
	            $imgfound = true;
	        }

	        if (isset($youtube[0]['thumbnails']['maxres']) && !$imgfound) {
	            $image = $youtube[0]['thumbnails']['maxres']['url'];
	        }

	    } catch (Exception $e) {

	        $image = '';

	    }

	    return $image;

	}

	/**
	 * Gets thumbnail uri of video
	 *
	 * @param  string $url URL of video
	 *
	 * @return string      uri of image
	 */
	function getVideoThumb($url) {

	    $type = '';

	    if (strpos($url, 'vimeo') !== FALSE) {
	        $type = 'vimeo';
	    }

	    if (strpos($url, 'youtube') !== FALSE) {
	        $type = 'youtube';
	    }

	    $id = getVideoId($url);

	    switch ($type) {
	        case 'vimeo':
	            return getVimeoThumb($id);
	            break;

	        case 'youtube':
	            return getYouTubeThumb($id);
	            break;

	        default:
	            return '';
	            break;
	    }

	}

	/**
	 * Returns title of a vimeo or youtube video
	 *
	 * @param  string $type youtube or vimeo
	 * @param  string $id   video id
	 *
	 * @return string       video title
	 */
	function getVideoTitle($url) {

	    $type = '';

	    if (strpos($url, 'vimeo') !== FALSE) {
	        $type = 'vimeo';
	    }

	    if (strpos($url, 'youtube') !== FALSE) {
	        $type = 'youtube';
	    }

	    if (!empty($type)) {

	        $id = getVideoId($url);

	        switch ($type) {
	            case 'vimeo':
	                $vimeo = simplexml_load_file('http://vimeo.com/api/v2/video/' . $id . '.xml');
	                return (string) $vimeo->video->title;
	                break;

	            case 'youtube':

	                $youtube = getVideoById($id);

	                return (string) $youtube['title'];
	                break;

	            default:
	                return '';
	                break;
	        }

	    }

	    return '';

	}

	/**
	 * Get the ID of a video from the URL
	 *
	 * @param  string $url URL of video
	 *
	 * @return string      ID of video
	 */
	function getVideoId($url) {

	    $type = '';

	    if (strpos($url, 'vimeo') !== FALSE) {
	        $type = 'vimeo';
	    }

	    if (strpos($url, 'youtube') !== FALSE) {
	        $type = 'youtube';
	    }

	    switch ($type) {
	        case 'vimeo':
	            return (int) substr(parse_url($url, PHP_URL_PATH), 1);
	            break;

	        case 'youtube':
	            return parse_yturl($url);
	            break;

	        default:
	            # code...
	            break;
	    }

	}

	/**
	 * Get Video Data from YouTube (or Cache) by ID
	 * @param  string $id YouTube video ID
	 * @return array     Array representation of Video data
	 */
	function getVideoById($id) {

	    $video = array();

	    // YouTube setup
	    // Key generated by BarkleyREI
	    // https://console.developers.google.com
	    $DEVELOPER_KEY = 'AIzaSyC0yLODeM2yN-2cIetNqz79jf1yeqMZl-I';

	    $client = new Google_Client();
	    $client->setDeveloperKey($DEVELOPER_KEY);

	    $yt = new Google_Service_YouTube($client);

	    // Caching setup
	    $cached = '';
	    $cache_time = '+4 hours';
	    $expire = strtotime($cache_time, time());

	    $cache_key = "youtube_video_" . $id;

	    if ($cached = cache_get($cache_key, 'cache')) {
	        if (isset($cached->data)) {
	            $video = $cached->data;
	        }
	    }

	    if (count($video) == 0) {

	        $search = $yt->videos->listVideos('id,snippet', array(
	            'id' => $id
	        ));

	        foreach ($search['items'] as $result) {
	            $video[] = array(
	                'id' => $result['id'],
	                'title' => $result['snippet']['title'],
	                'description' => $result['snippet']['description'],
	                'thumbnails' => $result['snippet']['thumbnails']
	            );
	        }

	        cache_set($cache_key, $video, 'cache', $expire);

	    }

	    return $video;

	}

	/**
	 *  Check if input string is a valid YouTube URL
	 *  and try to extract the YouTube Video ID from it.
	 *  @author  Stephan Schmitz <eyecatchup@gmail.com>
	 *  @param   $url   string   The string that shall be checked.
	 *  @return  mixed           Returns YouTube Video ID, or (boolean) false.
	 */
	function parse_yturl($url)
	{
	    $pattern = '#^(?:https?://)?(?:www\.)?(?:youtu\.be/|youtube\.com(?:/embed/|/v/|/watch\?v=|/watch\?.+&v=))([\w-]{11})(?:.+)?$#x';
	    preg_match($pattern, $url, $matches);
	    return (isset($matches[1])) ? $matches[1] : false;
	}

}
